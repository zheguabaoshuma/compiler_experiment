#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"


extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;

Node::Node()
{
    seq = counter++;
}

void Node::backPatch(std::vector<BasicBlock**> &list, BasicBlock*target)
{
    for(auto &bb:list)
        *bb = target;
}

std::vector<BasicBlock**> Node::merge(std::vector<BasicBlock**> &list1, std::vector<BasicBlock**> &list2)
{
    std::vector<BasicBlock**> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void FunctionDef::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    func->setRet(ret);
    if(!paras.empty())
    {
        func->setParas(paras);
        for(int i = 0; i < (int)paras.size(); i++){
            TemporarySymbolEntry* tempParasSe = new TemporarySymbolEntry(new PointerType(paras[i]->getType()),"__"+paras[i]->getIdentifierSymbolEntry()->getName());
            Operand* tempParasAddr = new Operand(tempParasSe);
            new AllocaInstruction(tempParasAddr, tempParasSe, func->getEntry());
            new StoreInstruction(tempParasAddr,func->getParasOp()[i],func->getEntry());
            func->getParas()[i]->getIdentifierSymbolEntry()->setAddr(tempParasAddr);
        }
    }
        
    BasicBlock *entry = func->getEntry();
    BasicBlock *exit = func->getExit();
    // set the insert point to the entry basicblock of this function.
    //BasicBlock *exit = builder->getInsertBB();
    builder->setInsertBB(entry);
    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
    FunctionType* funcType = dynamic_cast<FunctionType*>(se->getType());
    Type *retType = funcType->getRetType();
    Operand *zero_src = new Operand(new ConstantSymbolEntry(retType));
    Type* ret_ptr_type = new PointerType(retType);
    SymbolEntry *ret_addr = new TemporarySymbolEntry(ret_ptr_type, "__ret__");
    Operand* ret_addr_op = new Operand(ret_addr);
    new AllocaInstruction(ret, new ConstantSymbolEntry(retType), entry);
    new StoreInstruction(ret_addr_op, zero_src, entry);
    stmt->genCode();
    BasicBlock* last_bb = nullptr;
    for(auto bb:func->getBlockList())
    {
        if(last_bb != nullptr)
        {
            last_bb->addSucc(bb);
            bb->addPred(last_bb);
        }
        last_bb = bb;
    }
    if(last_bb->empty()){
        new UncondBrInstruction(func->getExit(), last_bb);
    }
    last_bb->addSucc(exit);
    exit->addPred(last_bb);
    SymbolEntry *ret_value = new TemporarySymbolEntry(retType, "__retvalue__");
    Operand* ret_value_op = new Operand(ret_value);
    new LoadInstruction(ret_value_op, ret_addr_op, exit);
    new RetInstruction(ret_value_op, exit);

}

void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op == OR)
    {
        // Todo
        BasicBlock *falseBB = new BasicBlock(func);  // if the result of lhs is false, jump to the falseBB.
        expr1->genCode();
        backPatch(expr1->falseList(), falseBB);
        builder->setInsertBB(falseBB);               // set the insert point to the falseBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        false_list = expr2->falseList();
        true_list = merge(expr1->trueList(), expr2->trueList());
    }
    else if(op == XOR){
        // Todo
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        new BinaryInstruction(BinaryInstruction::XOR, dst, src1, src2, bb);
    }
    else if(op >= ADD && op <= SUB)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
    else if(op >= MUL && op <= MOD)
    {
        // Todo
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case MUL:
            opcode = BinaryInstruction::MUL;
            break;
        case DIV:
            opcode = BinaryInstruction::DIV;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
    else if(op >= LESS && op <= GREATER)
    {
        // Todo
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case LESS:
            opcode = CmpInstruction::L;
            break;
        case GREATER:
            opcode = CmpInstruction::G;
            break;
        default:
            opcode = -1;
            break;
        }
        new CmpInstruction(opcode, dst, src1, src2, bb);
    }
    
    else if(op >= LESSANDEQ && op <= NOTEQ)
    {
        // Todo
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case LESSANDEQ:
            opcode = CmpInstruction::LE;
            break;
        case GREATERANDEQ:
            opcode = CmpInstruction::GE;
            break;
        case EQ:
            opcode = CmpInstruction::E;
            break;
        case NOTEQ:
            opcode = CmpInstruction::NE;
            break;
        default:
            opcode = -1;
            break;
        }
        new CmpInstruction(opcode, dst, src1, src2, bb);
    }
}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void IfStmt::genCode()
{
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    cond->genCode();
    new CondBrInstruction(then_bb, end_bb, cond->getOperand(), builder->getInsertBB());
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // Todo
    Function *func;
    BasicBlock *then_bb, *else_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    else_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);
    
    cond->genCode();
    new CondBrInstruction(then_bb, else_bb, cond->getOperand(), builder->getInsertBB());
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), else_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);
    
    builder->setInsertBB(else_bb);
    elseStmt->genCode();
    else_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, else_bb);

    builder->setInsertBB(end_bb);
}

void CompoundStmt::genCode()
{
    // Todo
    if(stmt!=nullptr)
        stmt->genCode();
}

void SeqNode::genCode()
{
    // Todo
    if(stmt1!=nullptr)
        stmt1->genCode();
    if(stmt2!=nullptr)
        stmt2->genCode();
}

void DeclStmt::genCode()
{
    for(int i=0;i<(int)Ids->size();i++)
    {
        IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>((*Ids)[i]->getSymPtr());
        if(se->isGlobal())
        {
            Operand *addr;
            Type* type = new PointerType(se->getType());
            SymbolEntry *addr_se = new IdentifierSymbolEntry(type, se->getName(), se->getScope());
            addr = new Operand(addr_se);
            if((*init_exprs)[i] == nullptr)
            {
                new AllocaGlobalInstruction(addr, se, nullptr ,builder->getInsertBB());
                // init_expr->genCode();
                // Operand *src = init_expr->getOperand();
                // new StoreInstruction(addr, src, builder->getInsertBB());
            }
            else if((*init_exprs)[i]->isCTConstant()){
                new AllocaGlobalInstruction(addr, se, (*init_exprs)[i] ,builder->getInsertBB());
            }
            
            se->setAddr(addr);
        }
        else if(se->isLocal())
        {
            Function *func = builder->getInsertBB()->getParent();
            BasicBlock *entry = func->getEntry();
            Instruction *alloca;
            Operand *addr;
            SymbolEntry *addr_se;
            Type *type;
            type = new PointerType(se->getType());
            addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
            addr = new Operand(addr_se);
            alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
            entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
            se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
            if((*init_exprs)[i]!=nullptr)
            {
                (*init_exprs)[i]->genCode();
                Operand *src = (*init_exprs)[i]->getOperand();
                new StoreInstruction(addr, src, builder->getInsertBB());
            }
        }
    }
    
}

void ReturnStmt::genCode()
{
    // Todo
    BasicBlock *bb = builder->getInsertBB();
    retValue->genCode();
    Operand *src = retValue->getOperand();

    Type* ret_type = bb->getParent()->getRet()->getType();
    Type* ret_ptr_type = new PointerType(ret_type);
    SymbolEntry *ret_addr = new TemporarySymbolEntry(ret_ptr_type, "__ret__");
    Operand* ret_addr_op = new Operand(ret_addr);
    new StoreInstruction(ret_addr_op, src, bb);
    
    new UncondBrInstruction(bb->getParent()->getExit(), bb);
    
}


void AssignStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    expr->genCode();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    Operand *src = expr->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
}

void Ast::typeCheck()
{
    if(root != nullptr)
        root->typeCheck();
}

void FunctionDef::typeCheck()
{
    // Todo
    
}

void BinaryExpr::typeCheck()
{
    // Todo
}

void Constant::typeCheck()
{
    // Todo
}

void Id::typeCheck()
{
    // Todo
}

void IfStmt::typeCheck()
{
    // Todo
}

void IfElseStmt::typeCheck()
{
    // Todo
}

void CompoundStmt::typeCheck()
{
    // Todo
}

void SeqNode::typeCheck()
{
    // Todo
}

void DeclStmt::typeCheck()
{
    // Todo
}

void ReturnStmt::typeCheck()
{
    // Todo
}

void AssignStmt::typeCheck()
{
    // Todo
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case MUL:
            op_str = "mul";
            break;
        case DIV:
            op_str = "div";
            break;
        case MOD:
            op_str = "mod";
            break;
        case AND:
            op_str = "and";
            break;
        case OR:
            op_str = "or";
            break;
        case LESS:
            op_str = "less";
            break;
        case GREATER:
            op_str = "greater";
            break;
        case LESSANDEQ:
            op_str = "lessandequal";
            break;
        case GREATERANDEQ:
            op_str = "greaterandequal";
            break;
        case EQ:
            op_str = "equal";
            break;
        case NOTEQ:
            op_str = "notequal";
            break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void UnaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case NOT:
            op_str = "not";
            break;
        case NEG:
            op_str = "neg";
            break;
        case INC:
            op_str = "inc";
            break;
        case DEC:
            op_str = "dec";
            break;
    }
    fprintf(yyout, "%*cUnaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr->output(level + 4);
}

void UnaryExpr::typeCheck()
{
    // Todo
}

void UnaryExpr::genCode()
{
    // Todo
    BasicBlock* bb = builder->getInsertBB();
    expr->genCode();
    Operand *src = expr->getOperand();
    ConstantSymbolEntry::Variable z;
    z.i = 0;
    ConstantSymbolEntry::Variable o;
    o.i = 1;
    Operand *zero_src = new Operand(new ConstantSymbolEntry(TypeSystem::intType,z));
    Operand *one_src = new Operand(new ConstantSymbolEntry(TypeSystem::intType,o));
    switch(op){
        case NEG:
            new BinaryInstruction(BinaryInstruction::SUB, dst, zero_src, src, bb);
            break;
        case NOT:
            new BinaryInstruction(BinaryInstruction::XOR, dst, src, zero_src, bb);
            break;
        case INC:
            new BinaryInstruction(BinaryInstruction::ADD, dst, src, one_src, bb);
            break;
        case DEC:
            new BinaryInstruction(BinaryInstruction::SUB, dst, src, one_src, bb);
            break;
        default:
            break;
    }
    
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    if(dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->isArray()){
        if(ArrayDeclInit){
            fprintf(yyout, "%*cId\tname: %s\ttype: %s[%d]\tscope: %d\n", level, ' ',
                name.c_str(), type.c_str(), dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getArraySize(),scope);
            for(auto expr : exprs->getExprs())
                expr->output(level + 4);
        }
        else
            fprintf(yyout, "%*cId\tname: %s\ttype: %s[%d]\tscope: %d\n", level, ' ',
                name.c_str(), type.c_str(), dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getArraySize(),scope);
        
        }
    else
        fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
                name.c_str(), scope, type.c_str());
}

void CompoundStmt::output(int level)
{
    if(stmt!=nullptr){
        fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
        stmt->output(level + 4);
    }
    
}

void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4);
}

void SeqNode::output(int level)
{
    fprintf(yyout, "%*cSequence\n", level, ' ');
    if(stmt1 != nullptr)
        stmt1->output(level + 4);
    if(stmt2 != nullptr)
        stmt2->output(level + 4);
}

DeclStmt::DeclStmt(std::vector<SymbolEntry*>* ses)
{
    for(auto se : *ses)
    {
        Id* t = new Id(se);
        Ids->push_back(t);
    }
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    // id->output(level + 4);
    for (auto id : *Ids)
        id->output(level + 4);
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    if(thenStmt!=nullptr)
        thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level + 4);
    loopStmt->output(level + 4);
}

void WhileStmt::typeCheck()
{
    // Todo
}

void WhileStmt::genCode()
{
    // Todo
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    stmt->output(level + 4);
}


void FunctionCall::output(int level)
{
    std::string name, type;
    
    name = se->toStr();
    type = se->getType()->toStr();
    
    fprintf(yyout, "%*cFunctionCall function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    
    for(auto expr : args)
        expr->output(level + 4);
}

void FunctionCall::typeCheck()
{
    // Todo
}

void FunctionCall::genCode()
{
    // Todo
    BasicBlock* bb = builder->getInsertBB();
    //check if function is sysy
    if(dynamic_cast<IdentifierSymbolEntry*>(se)->is_SYSY()){
        //BasicBlock* globalBB = builder->getGlobalBB();
        //new DeclareExternFunctionInstruction(se,globalBB);
    }
    
    std::vector<Operand*> args_op;
    for(auto expr : args)
    {
        expr->genCode();
        args_op.push_back(expr->getOperand());
    }

    //Operand* call_op = new Operand(se);
    new CallInstruction(dst, se, args_op, bb);
}

void FuncCallStmt::output(int level)
{
    fprintf(yyout, "%*cFunctionCallStmt\n", level, ' ');
    funcCall->output(level + 4);
}

void FuncCallStmt::typeCheck()
{
    // Todo
}

void FuncCallStmt::genCode()
{
    // Todo
}

FunctionDefParas::FunctionDefParas(SymbolEntry *se)
{
    Id* t = new Id(se);
    paras.push_back(t);
    paraTypes.push_back(se->getType());
    //printf("%s\n",se->getType()->toStr().c_str());
}

void FunctionDefParas::addPara(SymbolEntry *se)
{
    Id* t = new Id(se);
    paras.push_back(t);
    paraTypes.push_back(se->getType());
    //printf("%s\n",se->getType()->toStr().c_str());
}

void BreakStmt::output(int level)
{
    fprintf(yyout, "%*cBreakStmt\n", level, ' ');
}

void BreakStmt::typeCheck()
{
    // Todo
}

void BreakStmt::genCode()
{
    // Todo
}

void ContinueStmt::output(int level)
{
    fprintf(yyout, "%*cContinueStmt\n", level, ' ');
}

void ContinueStmt::typeCheck()
{
    // Todo
}

void ContinueStmt::genCode()
{
    // Todo
}

std::vector<Type *> ExprsNode::getExprsType()
{
    std::vector<Type *> exprsType;
    for(auto expr : exprs)
        exprsType.push_back(expr->getType());
    return exprsType;
}

void ExprsNode::output(int level)
{
    fprintf(yyout, "%*cExprs\n", level, ' ');
    for(auto expr : exprs)
        expr->output(level + 4);
}

void ExprStmt::output(int level)
{
    fprintf(yyout, "%*cExprStmt\n", level, ' ');
    exprs->output(level + 4);
}

void ExprStmt::typeCheck()
{
    // Todo
}

void ExprStmt::genCode()
{
    // Todo
}

void EmptyStmt::output(int level)
{
    fprintf(yyout, "%*cEmptyStmt\n", level, ' ');
}

void EmptyStmt::typeCheck()
{
    // Todo
}

void EmptyStmt::genCode()
{
    // Todo
}
